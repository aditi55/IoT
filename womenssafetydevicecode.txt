#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>

TinyGPSPlus gps; // The TinyGPS++ object
WiFiClient client; 
WiFiServer server(80);
SoftwareSerial ss(4, 5); // The serial connection to the GPS device


const char* ssid = "";
const char* password = "";

// Replace with your unique IFTTT URL resource
const char* resource = "/trigger/button_pressed/with/key/*************";



// Maker Webhooks IFTTT
const char* server = "maker.ifttt.com";
float latitude , longitude;
int year , month , date, hour , minute , second;
String date_str , time_str , lat_str , lng_str;
int pm;

void setup()
{
  //Establishing WiFi Connection
  Serial.begin(115200);
  ss.begin(9600);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());

 
  webIFTTTRequest();
  
  // Deep sleep mode until RESET pin is connected to a LOW signal (pushbutton is pressed)
  ESP.deepSleep(0);

}
  // Sending HTTP request to IFTTT webservice
void webIFTTTRequest() {
  Serial.print("Connecting to IFTTT ");

  Serial.print(server);
 
  if (!client.connect(server, 80)) {
    Serial.println("connection failed");
  }
 
  Serial.print("Request resource: ");
  Serial.println(resource);
  client.print(String("GET ") + resource + " HTTP/1.1\r\n" +
                  "Host: " + server + "\r\n" +
                  "Connection: close\r\n\r\n");
                 

  unsigned long timeout = millis();
  // Read all the lines of the reply from server and print them to Serial
  while (client.available() == 0) {
    if (millis() - timeout > 5000){
      Serial.println(">>> Client Timeout !");
      client.stop(); return;
    }
  }

  while(client.available()){
    Serial.write(client.read());
  }

  Serial.println("\nclosing connection");
  client.stop();
 
}
// Collecting data from GPS module
void loop()
{

  while (ss.available() > 0)
    if (gps.encode(ss.read()))
    {
      if (gps.location.isValid())
      {
        latitude = gps.location.lat();
        lat_str = String(latitude , 6);
        longitude = gps.location.lng();
        lng_str = String(longitude , 6);
      }

      if (gps.date.isValid())
      {
        date_str = "";
        date = gps.date.day();
        month = gps.date.month();
        year = gps.date.year();

        if (date < 10)
          date_str = '0';
        date_str += String(date);

        date_str += " / ";

        if (month < 10)
          date_str += '0';
        date_str += String(month);

        date_str += " / ";

        if (year < 10)
          date_str += '0';
        date_str += String(year);
      }

      if (gps.time.isValid())
      {
        time_str = "";
        hour = gps.time.hour();
        minute = gps.time.minute();
        second = gps.time.second();

        minute = (minute + 30);
        if (minute > 59)
        {
          minute = minute - 60;
          hour = hour + 1;
        }
        hour = (hour + 5) ;
        if (hour > 23)
          hour = hour - 24;

        if (hour >= 12)
          pm = 1;
        else
          pm = 0;

        hour = hour % 12;

        if (hour < 10)
          time_str = '0';
        time_str += String(hour);

        time_str += " : ";

        if (minute < 10)
          time_str += '0';
        time_str += String(minute);

        time_str += " : ";

        if (second < 10)
          time_str += '0';
        time_str += String(second);

        if (pm == 1)
          time_str += " PM ";
        else
          time_str += " AM ";

      }

    }
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client)
  {
    return;
  }

  // Preparing the response
String s = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n <!DOCTYPE html> <html> <head> <title>GPS Interfacing with NodeMCU</title> <style>";
  s += "a:link {background-color: YELLOW;text-decoration: none;}";
  s+= " body{background-image: url("loc.jpg");background-size: cover;" background-repeat: no-repeat;background-position-x: center;opacity: 100%;}";
       s+= ".box{ align-items: center;background :whitesmoke;opacity: 90%;text-align: center;margin-left: 300px;margin-top: 130px;width: 700px;height: 330px;border-width: 2px;";
       s+="border-color: teal;border-style: solid;box-shadow: 3px 3px 3px 3px;};</style> </head> <body align="center">";
s+= "<div class="box" id="box">"
s+= "<h1 style="font-size:300%;" ALIGN=CENTER><em>Location Tracking using GPS</em></h1>"
s+="<p style="font-size:150%; text-align:center;"><b>Location Details : </b></p>";
  s += "<table ALIGN=CENTER border = '2' cellspacing='1' cellpadding = "3" ";
  s+= "style="width:40%; height: 20%; font-weight: bolder;" >";
  s += " <tr><th>Latitude</th>";
  s += "<td ALIGN=CENTER >";
  s += lat_str; 
  s += "</td> </tr> <tr> <th>Longitude</th> <td ALIGN=CENTER >";
  s += lng_str;
  s += "</td> </tr> <tr> <th>Date</th> <td ALIGN=CENTER >";
  s += date_str;
  s += "</td></tr> <tr> <th>Time</th> <td ALIGN=CENTER >";
  s += time_str;
  s += "</td> </tr> </table> ";
 
 // Preparing the Google Maps Link from the latitude and longitude obtained from GPS
  if (gps.location.isValid())
  {
    s += "<br/><br/><p align=center><a style="color:RED;font-size:125%; background-color:whitesmoke;" href=""http://maps.google.com/maps?&z=15&mrt=yp&t=k&q=";// default google maps link	
	s += lat_str;
    s += "+";
    s += lng_str;
    s += " target="_top"><b>Click here!</a>To check the location in Google maps.</b></p></div>;}"

  s += "</body> </html> \n";

  client.print(s);
  delay(100);

}

